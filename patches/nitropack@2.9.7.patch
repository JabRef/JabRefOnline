diff --git a/dist/runtime/entries/azure.mjs b/dist/runtime/entries/azure.mjs
index fe72a0be7cd3984a638234280b409a7ca803b5d0..f57378bb6564af89b16ddbca66cbb11abe116115 100644
--- a/dist/runtime/entries/azure.mjs
+++ b/dist/runtime/entries/azure.mjs
@@ -3,6 +3,7 @@ import { parseURL } from "ufo";
 import { nitroApp } from "../app.mjs";
 import { getAzureParsedCookiesFromHeaders } from "../utils.azure.mjs";
 import { normalizeLambdaOutgoingHeaders } from "../utils.lambda.mjs";
+import { createConsola } from "consola";
 export async function handle(context, req) {
   let url;
   if (req.headers["x-ms-original-url"]) {
@@ -11,6 +12,25 @@ export async function handle(context, req) {
   } else {
     url = "/api/" + (req.params.url || "");
   }
+  const _getLogFn = (level) => {
+    if (level < 1) {
+      return context.log.error;
+    }
+    if (level === 1) {
+      return context.log.warn;
+    }
+    return context.log;
+  }
+  const consola = createConsola({
+    reporters: [
+      {
+        log: (logObj) => {
+          _getLogFn(logObj.level)(logObj.args);
+        },
+      },
+    ],
+  });
+  consola.wrapConsole();
   const { body, status, headers } = await nitroApp.localCall({
     url,
     headers: req.headers,
@@ -18,6 +38,7 @@ export async function handle(context, req) {
     // https://github.com/Azure/azure-functions-host/issues/293
     body: req.rawBody
   });
+  consola.restoreConsole();
   context.res = {
     status,
     cookies: getAzureParsedCookiesFromHeaders(headers),
diff --git a/dist/runtime/entries/azure.mjs.rej b/dist/runtime/entries/azure.mjs.rej
new file mode 100644
index 0000000000000000000000000000000000000000..4db7a7d651ac182c7dd73d976c51be54db9438c5
--- /dev/null
+++ b/dist/runtime/entries/azure.mjs.rej
@@ -0,0 +1,43 @@
+diff a/dist/runtime/entries/azure.mjs b/dist/runtime/entries/azure.mjs	(rejected hunks)
+@@ -3,6 +3,7 @@ import { parseURL } from "ufo";
+ import { nitroApp } from "../app.mjs";
+ import { getAzureParsedCookiesFromHeaders } from "../utils.azure.mjs";
+ import { normalizeLambdaOutgoingHeaders } from "../utils.lambda.mjs";
++import { createConsola } from "consola";
+ export async function handle(context, req) {
+   let url;
+   if (req.headers["x-ms-original-url"]) {
+@@ -11,6 +12,25 @@ export async function handle(context, req) {
+   } else {
+     url = "/api/" + (req.params.url || "");
+   }
++  const _getLogFn = (level) => {
++    if (level < 1) {
++      return context.log.error;
++    }
++    if (level === 1) {
++      return context.log.warn;
++    }
++    return context.log;
++  }
++  const consola = createConsola({
++    reporters: [
++      {
++        log: (logObj) => {
++          _getLogFn(logObj.level)(logObj.args);
++        },
++      },
++    ],
++  });
++  consola.wrapConsole();
+   const { body, status, statusText, headers } = await nitroApp.localCall({
+     url,
+     headers: req.headers,
+@@ -18,6 +38,7 @@ export async function handle(context, req) {
+     // https://github.com/Azure/azure-functions-host/issues/293
+     body: req.rawBody
+   });
++  consola.restoreConsole();
+   context.res = {
+     status,
+     // cookies https://learn.microsoft.com/en-us/azure/azure-functions/functions-reference-node?tabs=typescript%2Cwindows%2Cazure-cli&pivots=nodejs-model-v4#http-response
