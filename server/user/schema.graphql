scalar EmailAddress

extend type Query {
  """
  Get user by id.
  """
  user(id: ID!): User

  """
  Get the current user.
  """
  me: User
}

input LoginInput {
  email: EmailAddress!
  password: String!
}

input SignupInput {
  email: EmailAddress!
  password: String!
}

input ForgotPasswordInput {
  email: EmailAddress!
}

input ChangePasswordInput {
  token: String!
  id: ID!
  newPassword: String!
}

extend type Mutation {
  logout: LogoutPayload
  login(input: LoginInput!): LoginPayload
  signup(input: SignupInput!): SignupPayload
  forgotPassword(input: ForgotPasswordInput!): ForgotPasswordPayload
  changePassword(input: ChangePasswordInput!): ChangePasswordPayload
}

union LoginPayload = UserReturned | InputValidationProblem

union ChangePasswordPayload =
    UserReturned
  | TokenProblem
  | InputValidationProblem

union SignupPayload = UserReturned | InputValidationProblem

type ForgotPasswordPayload {
  result: Boolean!
}

type LogoutPayload {
  result: Boolean!
}

type UserReturned {
  user: User!
}

type InputValidationProblem {
  problems: [InputFieldValidationProblem]!
}

type TokenProblem {
  message: String!
}

type InputFieldValidationProblem {
  message: String!
  path: [String!]!
}

type User {
  id: ID!
  email: EmailAddress!

  groups: [Group!]!
}
