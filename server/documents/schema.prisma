enum DocumentType {
  JOURNAL_ARTICLE
  PROCEEDINGS_ARTICLE
  THESIS
  OTHER
}

// Articles, books etc added by users
// TODO: Parallel to the GraphQL api, we would like to have JournalArticle, ProceedingsArticle, etc as derived types.
//       However, this is not possible with the current version of Prisma, see:
//          https://github.com/prisma/prisma/issues/2505
//       There are different ways to handle polymorphism in relational databases, see:
//          https://www.martinfowler.com/eaaCatalog/singleTableInheritance.html
//          https://www.martinfowler.com/eaaCatalog/concreteTableInheritance.html
//          https://www.martinfowler.com/eaaCatalog/classTableInheritance.html
//          https://stackoverflow.com/questions/45621/how-do-you-deal-with-polymorphism-in-a-database
//       What we use below is essentially a "single table inheritance" approach combined with the "class table inheritence" by encapsulating certain information specific to a type in a separate table.
model UserDocument {
  id String @id @default(cuid())
  users User[]

  type DocumentType
  citationKeys String[]

  lastModified DateTime @default(now())
  added DateTime @default(now())
  revisionNumber Int @default(1)
  revisionHash String

  // Common fields
  title String?
  subtitle String?
  titleAddon String?
  abstract String?
  contributors DocumentContributor[]
  note String?
  languages String[]
  publicationState String?
  keywords String[]

  // Type-specific
  journalIssue JournalIssue? @relation(fields: [journalIssueId], references: [id])
  journalIssueId String?
  pageStart String?
  pageEnd String?
  electronicId String?
  originalLanguages String[]
  publishedAt String? // format: YYYY(-MM-DD) TODO: Should use Date format once https://github.com/prisma/prisma/issues/4355 is resolved

  // TODO: Check if they are really needed (in this form)
  booktitle String?
  edition String?
  pagetotal String?
  url String?
  urldate String?
  publisher String?

  // JabRef-specific
  explicitGroups Group[]
  priority String?

  // Identifier
  doi String?
  eprint String?
  eprintclass String?
  eprinttype String?
  isbn String?

  // Other fields that are not often used
  other UserDocumentOtherField[]

  @@unique([lastModified(sort: Asc), id(sort: Asc)], name: "checkpoint")
}

model UserDocumentOtherField {
  document UserDocument @relation(fields: [documentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  documentId String
  field String
  value String

  @@id([documentId, field])
}

enum EntityType {
  PERSON
  ORGANIZATION
}

// TODO: Split this in two tables Person and Organization once https://github.com/prisma/prisma/issues/2505 is fixed
model Entity {
  id String @id @default(cuid())
  type EntityType
  contributorTo DocumentContributor[]

  // Organization-specific
  name String?

  // Person-specific
  family String?
  given String?
  suffix String?
  nonDroppingParticle String?
  droppingParticle String?
}

enum ContributorRole {
  AUTHOR
  EDITOR
  TRANSLATOR
}

model DocumentContributor {
  document UserDocument @relation(fields: [documentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  documentId String
  entity Entity @relation(fields: [entityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  entityId String @map("authorId")
  position Int
  role ContributorRole

  @@id([documentId, entityId])
}
