extend type Query {
  """
  Get the group by id.
  """
  group(id: ID!): Group
}

extend type Mutation {
  createGroup(input: CreateGroupInput!): Group
  updateGroup(input: UpdateGroupInput!): Group
}

interface Group {
  id: ID!
  name: String!
  displayName: String!
  children: [Group!]!
  parent: Group

  hierarchyType: GroupHierarchyType
  color: String
  description: String
  icon: String
  isExpanded: Boolean

  documents: [Document!]!
}

# GraphQL sadly does not yet support extension of interfaces, so we need to copy & paste most of the fields for each group...

"""
A group that automatically generates subgroups based on keywords contained in documents.
"""
type AutomaticKeywordGroup implements Group {
  id: ID!
  name: String!
  displayName: String!
  children: [Group!]!
  parent: Group

  hierarchyType: GroupHierarchyType
  color: String
  description: String
  icon: String
  isExpanded: Boolean

  documents: [Document!]!

  # Specific fields
  """
  The field to search in.
  """
  field: String!
  keywordDelimiter: String!
  keywordHierarchicalDelimiter: String!
}
input AutomaticKeywordGroupDetails {
  field: String!
  keywordDelimiter: String!
  keywordHierarchicalDelimiter: String!
}

type AutomaticPersonsGroup implements Group {
  id: ID!
  name: String!
  displayName: String!
  children: [Group!]!
  parent: Group

  hierarchyType: GroupHierarchyType
  color: String
  description: String
  icon: String
  isExpanded: Boolean

  documents: [Document!]!

  # Specific fields
  """
  The field to search in.
  """
  field: String!
}
input AutomaticPersonsGroupDetails {
  field: String!
}

type ExplicitGroup implements Group {
  id: ID!
  name: String!
  displayName: String!
  children: [Group!]!
  parent: Group

  hierarchyType: GroupHierarchyType
  color: String
  description: String
  icon: String
  isExpanded: Boolean

  documents: [Document!]!

  # Specific fields
  """
  The delimiter used to separate keywords.
  """
  keywordDelimiter: String!
}
input ExplicitGroupDetails {
  keywordDelimiter: String!
  documentIds: [ID!]!
}

type LastNameGroup implements Group {
  id: ID!
  name: String!
  displayName: String!
  children: [Group!]!
  parent: Group

  hierarchyType: GroupHierarchyType
  color: String
  description: String
  icon: String
  isExpanded: Boolean

  documents: [Document!]!

  # Specific fields
  """
  The field to search in.
  """
  field: String!
  authorLastName: String!
}
input LastNameGroupDetails {
  field: String!
  authorLastName: String!
}

type WordKeywordGroup implements Group {
  id: ID!
  name: String!
  displayName: String!
  children: [Group!]!
  parent: Group

  hierarchyType: GroupHierarchyType
  color: String
  description: String
  icon: String
  isExpanded: Boolean

  documents: [Document!]!

  # Specific fields
  """
  The field to search in.
  """
  field: String!
  searchExpression: String!
  caseSensitive: Boolean!
  keywordDelimiter: String!
  onlySplitWordsAtDelimiter: Boolean!
}
input WordKeywordGroupDetails {
  field: String!
  searchExpression: String!
  caseSensitive: Boolean!
  keywordDelimiter: String!
  onlySplitWordsAtDelimiter: Boolean!
}

type RegexKeywordGroup implements Group {
  id: ID!
  name: String!
  displayName: String!
  children: [Group!]!
  parent: Group

  hierarchyType: GroupHierarchyType
  color: String
  description: String
  icon: String
  isExpanded: Boolean

  documents: [Document!]!

  # Specific fields
  """
  The field to search in.
  """
  field: String!
  searchExpression: String!
  caseSensitive: Boolean!
}
input RegexKeywordGroupDetails {
  field: String!
  searchExpression: String!
  caseSensitive: Boolean!
}

type SearchGroup implements Group {
  id: ID!
  name: String!
  displayName: String!
  children: [Group!]!
  parent: Group

  hierarchyType: GroupHierarchyType
  color: String
  description: String
  icon: String
  isExpanded: Boolean

  documents: [Document!]!

  # Specific fields
  """
  The search expression.
  """
  searchExpression: String!
  caseSensitive: Boolean!
  isRegEx: Boolean!
}
input SearchGroupDetails {
  searchExpression: String!
  caseSensitive: Boolean!
  isRegEx: Boolean!
}

type TexGroupDevicePathPair {
  deviceName: String!
  filePath: String!
}
input TexGroupDevicePathPairInput {
  deviceName: String!
  filePath: String!
}
type TexGroup implements Group {
  id: ID!
  name: String!
  displayName: String!
  children: [Group!]!
  parent: Group

  hierarchyType: GroupHierarchyType
  color: String
  description: String
  icon: String
  isExpanded: Boolean

  documents: [Document!]!

  # Specific fields
  """
  Paths to the TeX files that are part of this group.
  """
  paths: [TexGroupDevicePathPair!]!
}
input TexGroupDetails {
  paths: [TexGroupDevicePathPairInput!]!
}

enum GroupHierarchyType {
  """
  The group's content is independent of its hierarchical position.
  """
  INDEPENDENT

  """
  The group's content is the intersection of its own content with its supergroups' content.
  """
  INTERSECTION

  """
  The group's content is the union of its own content with its subgroups' content.
  """
  UNION
}

input CreateGroupInput {
  name: String!
  displayName: String
  children: [CreateGroupInput!]!
  parentId: ID

  hierarchyType: GroupHierarchyType
  color: String
  description: String
  icon: String
  isExpanded: Boolean

  # GraphQL does not support input interface/union types
  # https://github.com/graphql/graphql-spec/blob/main/rfcs/InputUnion.md
  # Thus we use "tagged inputs" as a workaround, which is pretty close to the current favorite for the official language extension
  # The user of the API should specify exactly one of the following fields.

  """
  Automatic keyword group info
  """
  automaticKeywordGroup: AutomaticKeywordGroupDetails
  automaticPersonsGroup: AutomaticPersonsGroupDetails
  explicitGroup: ExplicitGroupDetails
  lastNameGroup: LastNameGroupDetails
  wordKeywordGroup: WordKeywordGroupDetails
  regexKeywordGroup: RegexKeywordGroupDetails
  searchGroup: SearchGroupDetails
  texGroup: TexGroupDetails
}
input UpdateGroupInput {
  id: ID!
  name: String
  displayName: String
  children: [UpdateGroupInput!]!
  parentId: ID

  hierarchyType: GroupHierarchyType
  color: String
  description: String
  icon: String

  # GraphQL does not support input interface/union types
  # https://github.com/graphql/graphql-spec/blob/main/rfcs/InputUnion.md
  # Thus we use "tagged inputs" as a workaround, which is pretty close to the current favorite for the official language extension
  # The user of the API should specify exactly one of the following fields.

  """
  Automatic keyword group info
  """
  automaticKeywordGroup: AutomaticKeywordGroupDetails
  automaticPersonsGroup: AutomaticPersonsGroupDetails
  explicitGroup: ExplicitGroupDetails
  lastNameGroup: LastNameGroupDetails
  wordKeywordGroup: WordKeywordGroupDetails
  regexKeywordGroup: RegexKeywordGroupDetails
  searchGroup: SearchGroupDetails
  texGroup: TexGroupDetails
}
