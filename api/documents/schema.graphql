scalar DateTime

input FieldValueTupleInput {
  field: String!
  value: String!
}

"""
Ways in which to filter a list of documents.
"""
input DocumentFilters {
  "Only include documents that belong to the group with this ID."
  groupId: ID
  "Only include documents that match the given search string."
  query: String
}

extend type User {
  "A list of documents that belong to the user."
  documents(
    "Filtering options for documents returned."
    filterBy: DocumentFilters
  ): [Document!]!
}

type Person {
  id: ID!
  name: String!
}

type Organization {
  id: ID!
  name: String!
}

union Entity = Person | Organization

type Journal {
  id: ID!
  name: String!
}

"""
A university or some other institution.
"""
type Institution {
  "The unique identifier of the institution."
  id: ID!
  "The name of the university or institution."
  name: String!
}

enum DocumentType {
  ARTICLE
  PHD_THESIS
  IN_PROCEEDINGS
}

interface Document {
  id: ID!
  type: DocumentType
  title: String
  "Keywords or tags used to describe the content."
  keywords: [String]
  "A short description that summarizes the work."
  abstract: String
  "The authors of this work."
  authors: [Entity!]!
}

type Article implements Document {
  id: ID!
  type: DocumentType
  title: String
  authors: [Entity!]!
  keywords: [String!]!
  abstract: String

  "The page on which the work starts; for example '135' or 'xiii'."
  pageStart: String
  "The page on which the work ends; for example '138' or 'xvi'."
  pageEnd: String
  journal: Journal
}

type PhdThesis implements Document {
  id: ID!
  type: DocumentType
  title: String
  authors: [Entity!]!
  keywords: [String!]!
  abstract: String

  "The university or some other institution where the thesis has been written at."
  institution: Institution
}

type InProceedings implements Document {
  id: ID!
  type: DocumentType
  title: String
  authors: [Entity!]!
  keywords: [String!]!
  abstract: String

  "The title of the proceedings."
  booktitle: String
}

type Unknown implements Document {
  id: ID!
  type: DocumentType
  title: String
  authors: [Entity!]!
  keywords: [String!]!
  abstract: String
}

"""
Articles, books etc
"""
input DocumentInput {
  type: String!
  citationKey: String

  lastModified: DateTime
  added: DateTime

  fields: [FieldValueTupleInput!]
}

input DocumentUpdateInput {
  id: ID!
  type: String
  citationKey: String

  lastModified: DateTime
  added: DateTime

  fields: [FieldValueTupleInput!]
}

extend type Query {
  userDocument(id: ID!): Document
}

extend type Mutation {
  addUserDocument(document: DocumentInput!): Document
  updateUserDocument(document: DocumentUpdateInput!): Document
}
