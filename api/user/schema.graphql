scalar EmailAddress

extend type Query {
  """
  Get user by id.
  """
  user(id: ID!): User

  """
  Get the current user.
  """
  me: User
}

extend type Mutation {
  logout: Boolean
  login(email: EmailAddress!, password: String!): User
  signup(email: EmailAddress!, password: String!): UserRegistrationResponse
  forgotPassword(email: EmailAddress!): Boolean
  changePassword(token: String!, id: ID!, newPassword: String!): User
}

union UserRegistrationResponse = UserRegistered | InputValidationProblem

type UserRegistered {
  user: User!
}

interface InputValidationProblem {
  problems: [InputFieldValidationProblem]!
}

interface InputFieldValidationProblem {
  message: String!
  path: String!
}

type User {
  id: ID!
  email: EmailAddress!

  documentsRaw: [DocumentRaw!]!
  documents: [Document!]!

  groups: [Group!]!
}
