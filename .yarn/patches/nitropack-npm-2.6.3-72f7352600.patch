diff --git a/dist/runtime/entries/azure-functions.mjs b/dist/runtime/entries/azure-functions.mjs
index 7437e5b196f983f4706d56c5820e664b4f1d4098..30251a23976e8a261778404b1e13561d3fa5c2e0 100644
--- a/dist/runtime/entries/azure-functions.mjs
+++ b/dist/runtime/entries/azure-functions.mjs
@@ -18,4 +18,5 @@ export async function handle(context, req) {
     headers: normalizeLambdaOutgoingHeaders(headers, true),
     body: body ? body.toString() : statusText
   };
+  context.error("Nitro response", context.res.cookies, context.res.headers, headers)
 }
diff --git a/dist/runtime/entries/azure.mjs b/dist/runtime/entries/azure.mjs
index 2ed72eb8e5f5f6b740d909bb12f62cf761599569..db36cee92c7638fc99e02f4ac9ff1f7b86eb2d99 100644
--- a/dist/runtime/entries/azure.mjs
+++ b/dist/runtime/entries/azure.mjs
@@ -25,4 +25,5 @@ export async function handle(context, req) {
     headers: normalizeLambdaOutgoingHeaders(headers, true),
     body: body ? body.toString() : statusText
   };
+  context.log.error("Nitro response", context.res.cookies, context.res.headers, headers)
 }
diff --git a/dist/runtime/utils.azure.mjs b/dist/runtime/utils.azure.mjs
index d0e27bd1b36683f7834ed097c07702429da3c152..1a81eb140d15c413407d5789709676e1bfa2b029 100644
--- a/dist/runtime/utils.azure.mjs
+++ b/dist/runtime/utils.azure.mjs
@@ -1,13 +1,57 @@
 import { parse } from "cookie-es";
 import { splitCookiesString } from "h3";
-import { joinHeaders } from "./utils.mjs";
 export function getAzureParsedCookiesFromHeaders(headers) {
-  const c = String(headers["set-cookie"]);
-  if (!c || c.length === 0) {
+  const raw = headers["set-cookie"];
+  if (!raw || typeof raw === "number" || raw.length === 0) {
     return [];
   }
-  const cookies = splitCookiesString(joinHeaders(c)).map(
-    (cookie) => parse(cookie)
-  );
+  const rawCookies = Array.isArray(raw) ? raw : splitCookiesString(String(raw));
+  const cookies = rawCookies.flatMap((cookie) => {
+    const entries = Object.entries(parse(cookie));
+    console.log(parse(cookie), cookie);
+    if (entries.length > 0) {
+      const [entry, ...rest] = entries;
+      const options = Object.fromEntries(
+        rest.map(([k, v]) => [k.toLowerCase(), v])
+      );
+      const res = {
+        name: entry[0],
+        value: entry[1],
+        domain: options.domain,
+        path: options.path,
+        expires: parseNumberOrDate(options.expires),
+        // secure: options.secure,
+        // httponly: options.httponly,
+        samesite: options.samesite,
+        maxAge: parseNumber(options.maxAge)
+      };
+      for (const key in res) {
+        if (res[key] === void 0) {
+          delete res[key];
+        }
+      }
+      return [res];
+    }
+    return [];
+  });
   return cookies;
 }
+function parseNumberOrDate(expires) {
+  const expiresAsNumber = parseNumber(expires);
+  if (expiresAsNumber !== void 0) {
+    return expiresAsNumber;
+  }
+  const expiresAsDate = new Date(expires);
+  if (!Number.isNaN(expiresAsDate.getTime())) {
+    return expiresAsDate;
+  }
+}
+function parseNumber(maxAge) {
+  if (!maxAge) {
+    return void 0;
+  }
+  const maxAgeAsNumber = Number(maxAge);
+  if (!Number.isNaN(maxAgeAsNumber)) {
+    return maxAgeAsNumber;
+  }
+}
