diff --git a/dist/runtime/entries/azure.mjs b/dist/runtime/entries/azure.mjs
index 2ed72eb8e5f5f6b740d909bb12f62cf761599569..ac3dad70537e585d63c713048c545238a83d0d5f 100644
--- a/dist/runtime/entries/azure.mjs
+++ b/dist/runtime/entries/azure.mjs
@@ -3,6 +3,8 @@ import { parseURL } from "ufo";
 import { nitroApp } from "../app.mjs";
 import { getAzureParsedCookiesFromHeaders } from "../utils.azure.mjs";
 import { normalizeLambdaOutgoingHeaders } from "../utils.lambda.mjs";
+import { createConsola } from "consola";
+
 export async function handle(context, req) {
   let url;
   if (req.headers["x-ms-original-url"]) {
@@ -11,6 +13,25 @@ export async function handle(context, req) {
   } else {
     url = "/api/" + (req.params.url || "");
   }
+  const _getLogFn = (level) => {
+    if (level < 1) {
+      return context.log.error;
+    }
+    if (level === 1) {
+      return context.log.warn;
+    }
+    return context.log;
+  }
+  const consola = createConsola({
+    reporters: [
+      {
+        log: (logObj) => {
+          _getLogFn(logObj.level)(logObj.args);
+        },
+      },
+    ],
+  });
+  consola.wrapConsole();
   const { body, status, statusText, headers } = await nitroApp.localCall({
     url,
     headers: req.headers,
@@ -18,6 +39,7 @@ export async function handle(context, req) {
     // https://github.com/Azure/azure-functions-host/issues/293
     body: req.rawBody
   });
+  consola.restoreConsole();
   context.res = {
     status,
     // cookies https://learn.microsoft.com/en-us/azure/azure-functions/functions-reference-node?tabs=typescript%2Cwindows%2Cazure-cli&pivots=nodejs-model-v4#http-response
diff --git a/dist/runtime/utils.azure.mjs b/dist/runtime/utils.azure.mjs
index d0e27bd1b36683f7834ed097c07702429da3c152..0dd0309f7c73ccb709c7bee85360267f7198a4da 100644
--- a/dist/runtime/utils.azure.mjs
+++ b/dist/runtime/utils.azure.mjs
@@ -1,13 +1,56 @@
 import { parse } from "cookie-es";
 import { splitCookiesString } from "h3";
-import { joinHeaders } from "./utils.mjs";
 export function getAzureParsedCookiesFromHeaders(headers) {
-  const c = String(headers["set-cookie"]);
-  if (!c || c.length === 0) {
+  const raw = headers["set-cookie"];
+  if (!raw || typeof raw === "number" || raw.length === 0) {
     return [];
   }
-  const cookies = splitCookiesString(joinHeaders(c)).map(
-    (cookie) => parse(cookie)
-  );
+  const rawCookies = Array.isArray(raw) ? raw : splitCookiesString(String(raw));
+  const cookies = rawCookies.flatMap((cookie) => {
+    const entries = Object.entries(parse(cookie));
+    if (entries.length > 0) {
+      const [entry, ...rest] = entries;
+      const options = Object.fromEntries(
+        rest.map(([k, v]) => [k.toLowerCase(), v])
+      );
+      const res = {
+        name: entry[0],
+        value: entry[1],
+        domain: options.domain,
+        path: options.path,
+        expires: parseNumberOrDate(options.expires),
+        // secure: options.secure,
+        // httponly: options.httponly,
+        samesite: options.samesite,
+        maxAge: parseNumber(options.maxAge)
+      };
+      for (const key in res) {
+        if (res[key] === void 0) {
+          delete res[key];
+        }
+      }
+      return [res];
+    }
+    return [];
+  });
   return cookies;
 }
+function parseNumberOrDate(expires) {
+  const expiresAsNumber = parseNumber(expires);
+  if (expiresAsNumber !== void 0) {
+    return expiresAsNumber;
+  }
+  const expiresAsDate = new Date(expires);
+  if (!Number.isNaN(expiresAsDate.getTime())) {
+    return expiresAsDate;
+  }
+}
+function parseNumber(maxAge) {
+  if (!maxAge) {
+    return void 0;
+  }
+  const maxAgeAsNumber = Number(maxAge);
+  if (!Number.isNaN(maxAgeAsNumber)) {
+    return maxAgeAsNumber;
+  }
+}
